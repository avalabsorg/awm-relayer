// Copyright (C) 2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

package evm

import (
	"encoding/hex"
	"testing"

	"github.com/ava-labs/avalanchego/utils/logging"
	"github.com/ava-labs/awm-relayer/config"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
)

func TestUnpack(t *testing.T) {
	ctrl := gomock.NewController(t)

	m := NewContractMessage(logging.NewMockLogger(ctrl), config.SourceSubnet{})

	type receipt struct {
		receivedMessageID    uint64
		relayerRewardAddress string
	}

	testCases := []struct {
		input              string
		destinationChainID string
	}{
		{
			input:              "000000000000000000000000000000000000000000000000000000000000000044441af4a26b41b9143c382173d0c1c8416a24577a20375b0ddd23ac689902ffee16000001ea0000000000000000000000000000000000008db97c7cece249c2b98bdc0226cc4c2a57bf52fc000000000000000000000000abcedf1234abcedf1234abcedf1234abcedf1234000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000008db97c7cece249c2b98bdc0226cc4c2a57bf52fc000000000000000000000000abcedf1234abcedf1234abcedf1234abcedf1234000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002acafebabecafebabecafebabecafebabecafebabecafebabecafebabecafebabecafebabecafebabecafe00000000000000000000000000000000000000000000",
			destinationChainID: "1af4a26b41b9143c382173d0c1c8416a24577a20375b0ddd23ac689902ffee16",
		},
		{
			input:              "00000000000000000000000000000000000000000000000000000000000000004444f189207e063e5355185286c0e1391559b43599fe3091723502a82c23caf4c87c0000022a0000000000000000000000000000000000008db97c7cece249c2b98bdc0226cc4c2a57bf52fc000000000000000000000000abcedf1234abcedf1234abcedf1234abcedf1234000001e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008db97c7cece249c2b98bdc0226cc4c2a57bf52fc000000000000000000000000abcedf1234abcedf1234abcedf1234abcedf1234000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a100ff48a37cab9f87c8b5da933da46ea1a5fb800000000000000000000000000000000000000000000000000000000000000035321654789654321354351dead351c3d31ea1c31dea3d3c31d3547e3a84e3a58d3541c351ad354ea354d354c35ad354d3e1a7986ad30000000000000000000000",
			destinationChainID: "f189207e063e5355185286c0e1391559b43599fe3091723502a82c23caf4c87c",
		},
	}

	for _, testCase := range testCases {
		input, err := hex.DecodeString(testCase.input)
		if err != nil {
			t.Errorf("failed to decode test input: %v", err)
		}
		msg, err := m.UnpackWarpMessage(input)
		if err != nil {
			t.Errorf("failed to unpack message: %v", err)
		}

		assert.Equal(t, testCase.destinationChainID, msg.WarpUnsignedMessage.DestinationChainID.Hex())
	}
}
