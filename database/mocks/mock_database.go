// Code generated by MockGen. DO NOT EDIT.
// Source: database.go
//
// Generated by this command:
//
//	mockgen -source=database.go -destination=./mocks/mock_database.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	database "github.com/ava-labs/awm-relayer/database"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockRelayerDatabase is a mock of RelayerDatabase interface.
type MockRelayerDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockRelayerDatabaseMockRecorder
}

// MockRelayerDatabaseMockRecorder is the mock recorder for MockRelayerDatabase.
type MockRelayerDatabaseMockRecorder struct {
	mock *MockRelayerDatabase
}

// NewMockRelayerDatabase creates a new mock instance.
func NewMockRelayerDatabase(ctrl *gomock.Controller) *MockRelayerDatabase {
	mock := &MockRelayerDatabase{ctrl: ctrl}
	mock.recorder = &MockRelayerDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayerDatabase) EXPECT() *MockRelayerDatabaseMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRelayerDatabase) Get(relayerKey common.Hash, dataKey database.DataKey) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", relayerKey, dataKey)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRelayerDatabaseMockRecorder) Get(relayerKey, dataKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRelayerDatabase)(nil).Get), relayerKey, dataKey)
}

// Put mocks base method.
func (m *MockRelayerDatabase) Put(relayerKey common.Hash, dataKey database.DataKey, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", relayerKey, dataKey, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockRelayerDatabaseMockRecorder) Put(relayerKey, dataKey, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRelayerDatabase)(nil).Put), relayerKey, dataKey, value)
}
